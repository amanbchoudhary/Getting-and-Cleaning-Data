a = matrix (rnorm (100),5 , 20)
a
apply (a,2,mean)
apply (a,1,mean)
x
x[1]
a = x[[q]]
a = x[[1]]
a
a = matrix (c (1,4,7,4,5,6,4,2,5) , 3, 3)
a
apply (a , 1, mean)
apply (a , 2, mean)
apply (a, 1, sum)
apply (a, 2, sum)
rowSums
rowSums(a)
rowMeans(a)
quantile
x = matrix (rnorm (200) , 20, 10)
apply (x , 1, qauntile , c(0.25,0.75))
apply (x , 1, qauntile , probs = c(0.25,0.75))
apply (x , 1, quantile , probs = c(0.25,0.75))
apply (x , 1, quantile , c(0.25,0.75))
y = apply (x , 1, quantile , c(0.25,0.75))
class(y)
y = apply (x , 2, quantile , c(0.25,0.75))
y
a = array (rnorm (40) , c(2,2,10))
a
apply (a , c(1,2), mean)
d=  c(1.4854962,0.9128330,0.7838546,-1.018360,-1.4555481,1.0758078,-0.63227651,1.739733,2.038749,0.8904595)
mean (d)
apply (a , c(1,3), mean)
mean (0.8904595 , 1.7433300)
mean (c(0.8904595 , 1.7433300))
apply (a , c(2,3), mean)
romMeans (a , dims =2)
rowMeans (a , dims =2)
mapply
a = list (rep (1,4) , rep (2,3 ) , rep (3,2) , rep (4,1))
a
a
a
a
rm (a,b,x,y,z,d)
mapply (rep , 1:4 , 4:1)
mapply (rep , 1:4 , c(1,6,8,5))
a = 1:5
b = 2:6
mapply (a,b, mean)
mapply (mean , a, b)
a
as.list (a)
mapply (cor , a, b)
a+b
noise = function (n, mean , sd){}
noise = function (n, mean , sd){
rnorm (n ,mean ,sd) }
noise (5,1,2)
noise (1:5,5:1,2)
mapply (noise , 1:5 , 1:5 ,2)
noise (1,1,2)
rnorm (1,1,2)
mapply (rnorm , 1:5 ,1:5 , 2)
mapply (mean , a)
mapply (mean , a,b)
mapply (mean , c(a,b)
)
x = 1:5
y = x[1:3]
y
y = x[5:3]
y
x = c(9,87,5,4,3)
y
y = x[5:3]
y
y = x[1:3]
y
runif (10)
rnorm (10)
x = c(rnorm (10) , runif (10) , rnorm (10,1))
x
gl
gl(1,10)
gl(,10)
gl(3,10)
tapply(x,g)
gl(3,10) = y
y = gl(3,10)
tapply(x,y)
tapply(x,y ,mean)
tapply(x,mean)
tapply(x,y ,mean)
y = append (rep (2,10), rep (5,10), rep (7,10))
y
y = append (rep (2,10), rep (5,10))
y = append (y, rep (7,10))
y
tapply(x,y ,mean)
tapply(x,y ,mean , simplify = FALSE)
tapply(x,y ,range , simplify = FALSE)
x = c(1,4,5,9)
y = c("m", "f", "f", "m")
tapply (x, y, mean)
pnorm (3.6,mean = 3.45 , sd= 0.163.)
pnorm (3.6,mean = 3.45 , sd= 0.163)
pnorm (3.6,mean = 3.45 , sd= 0.163 , lower.tail =  FALSE)
qnorm (0.95 , 1, 1)
qnorm (0.95 , 0, 1)
qnorm(0.025)
qnorm(0.025 , lower.tail =  FALSE)
qnorm(0.005)
qnorm (0.95 , 55 ,6)
qnrom (0.95)
qnorm (0.95)
qnorm (0.025)
sum (dbinom(1:10 , 10 , 0.07))
pnorm (34, 24, 4 ,lower.tail = FALSE)
1- pnorm (0.81)
1- pnorm (3.2 , 3, 0.246)
pnorm (2.8 , 3 , 0.246)
qnorm (0.975)
pnorm (97.36)
1-pnorm (97.36)
pnorm (2.5)
pnorm (25)
pnorm (3)
qnorm (0.015)
qnorm (0.0015)
par
2*pnorm (32 , mean = 30.69 , sd = 4.31/6)
2*pnorm (32 , mean = 30.69 , sd = 4.31/6 , lower.tail =  FALSE)
pnorm (134, 130 ,17)
pnorm (134, 130 ,17/sqrt (35))
pnorm (134, 130 ,17/sqrt (35) , lower.tail = FALSE)
qnorm (0.05)
30.69 - (1.644*4.31/sqrt (36))
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
x <- c(1,3, 5)
y <- 1:3
rbind (x,y)
setwd("~/R Programming")
ls
ls()
dir()
y = read.csv("hw1_data.csv")
names (y)
head (y)
nrow (y)
tail (y)
y[47,1]
y[47]
y[47,]
summary(y$Ozone)
mean (y$Ozone , na.rm = TRUE)
y[1] > 31 && y[4] > 90
y[1] > 31 & y[4] > 90
y[y[1] > 31 & y[4] > 90,]
good = y[1] > 31 & y[4] > 90
y[good, ]
good = complete.cases (y)
a = y[good , ]
good = a[1] > 31 & a[4] > 90
b = a[good , ]
b
mean (b[2])
mean (b[[2])
mean (b$Solar.R)
good = a[5]==6
b = a[good , ]
mean b[4]
mean (b[4])
b
mean (b$Temp)
good = y[5]==6
b = y[good , ]
b
mean (y$Temp)
mean (b$Temp)
b = y[y[5]==5 , ]
b
max(b$Ozone)
max(b$Ozone, na.rm = TRUE)
swirl()
library ()
library(swirl)
install_from_swirl ("Getting and Cleaning Data")
swirl()
library(swirl)
install_course_zip("E:/Downloads/Compressed/swirl_courses-master.zip", which_course = "Getting and Cleaning Data")
install_course_zip("E:/Downloads/Compressed/swirl_courses-master.zip", which_course = "Getting and Cleaning Data" , multi = TRUE)
swirl()
getwd()
setwd (..)
.dir()
dir()
cd
cd /
cd ..
setwd ("E/Documents")
setwd ("E:/Documents")
setwd("../")
getwd()
getwd()
setwd("../")
getwd()
getwd("./Documents")
setwd("./Documents")
getwd()
dir()
file.exists ("R")
dir.create("Aman")
dir()
dir.create("Aman")
fileurl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
dir()
dir.create("Getting and Cleaning Data")
setwd("./Getting and Cleaning Data/")
getwd()
download.file(fileurl , destfile = "./data/camera.csv", method= curl)
download.file(fileurl , destfile = "./data/camera.csv", method= "curl")
dir()
dir.create("data")
download.file(fileurl , destfile = "./data/camera.csv", method= "curl")
dir()
setwd("./data/")
dir()
setwd("/..")
dir()
getwd()
setwd("./Documents/Getting and Cleaning Data/")
download.file(fileurl , destfile = "./data/camera.csv", method= "curl")
download.file(fileurl , destfile = "./data/camera.csv")
list.files("./data/")
date.downloaded <- Date()
date.downloaded <- date()
date.downloaded
y = read.csv ("./data//camera.csv")
y
names(y)
getwd()
if (!file.exists ("data")) {dir.create ("data")}
getwd()
fileurl <- https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD
fileurl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileurl , destfile = "./data/camera.xlsx")
date.downloaded<- data()
library(xlsx)
install("xlsx")
install.packages ("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
library(xlsx)
library(xlsx)
cameraData <- read.xlsx("./data//camera.xlsx")
cameraData <- read.xlsx("./data/camera.xlsx")
cameraData <- read.xlsx("./data/camera.xlsx" ,sheetIndex = 1 , header = TRUE)
cameraData <- read.xlsx("./data//camera.xlsx" ,sheetIndex = 1 , header = TRUE)
cameraData <- read.xlsx("./data//camera.xlsx" ,sheetIndex = 1 , header = TRUE)
download.file(fileurl , destfile = "./data/camera.xlsx" mode = "wb")
download.file(fileurl , destfile = "./data/camera.xlsx", mode = "wb")
cameraData <- read.xlsx("./data/camera.xlsx" ,sheetIndex = 1 , header = TRUE)
View(cameraData)
View(cameraData)
CameraDataSubset <- read.xlsx ("./data//camera.xlsx", sheetIndex = 1 , colIndex = c(1,3 ,2))
View(CameraDataSubset)
CameraDataSubset <- read.xlsx ("./data//camera.xlsx", sheetIndex = 1 , colIndex = c(1,3 ,2) , rowIndex =  c(4,5,6))
View(CameraDataSubset)
CameraDataSubset <- read.xlsx ("./data//camera.xlsx", sheetIndex = 1 , colIndex = c(1,3 ,2) , rowIndex =  c(4,5,6) , header = FALSE)
View(CameraDataSubset)
rm (a,b, CameraDataSubset)
rm (good)
?write.xlsx
a = y[1:10 , ]
write.xlsx ("./CameraEdited.xlsx" , sheetName = "CameraData", col.names = TRUE , row.names = TRUE)
write.xlsx (a , "./CameraEdited.xlsx" , sheetName = "CameraData", col.names = TRUE , row.names = TRUE)
install.packages ("XLConnect")
library (XLConnect)
install.packages ("XLConnectJars")
library (XLConnect)
library(XML)
install.packages("XML")
library(XML)
fileurl<- "http://www.w3schools.com/xml/simple.xml"
?xmlTreeParse
doc <- xmlTreeParse (fileurl , useInternalNodes = TRUE)
fileurl<- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse (fileurl , useInternalNodes = TRUE)
fileurl<- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse (fileurl , useInternalNodes = TRUE)
doc <- xmlTreeParse (fileurl , useInternal = TRUE)
doc <- xmlTreeParse (fileurl, useInternal = TRUE)
fileurl
doc <- xmlTreeParse (fileurl, useInternal = TRUE)
http_proxy = 10.3.100.208:8080
use_proxy
use_proxy (10.3.100.207 , port = 8080 )
use_proxy ("10.3.100.207" , port = 8080 )
library ("hhtr")
library ("httr")
use_proxy ("10.3.100.207" , port = 8080 )
doc <- xmlTreeParse (fileurl, useInternal = TRUE)
file.edit("./Renviron")
doc <- xmlTreeParse (fileurl, useInternal = TRUE)
cd
ls
ls()
dir()
readRenviron
readRenviron()
readRenviron("./")
getwd()
dir()
setwd("/..")
getwd()
setwd("/Documents/")
setwd("/Documents/R Programming/")
setwd("/.")
getwd()
setwd("/Documents/R Programming/")
setwd("./")
getwd()
setwd("../")
getwd()
file.edit('~/.Renviron')
file.edit("~/.Renviron")
file.edit('~/.Rprofile')
doc <- xmlTreeParse (fileurl, useInternal = TRUE)
readRenviron("./")
readRenviron(".")
readRenviron("")
readRenviron("E:/Documents/")
clear
clear()
fileurl <- "http://www.w3schools.com/xml/simple.xml"
library (xml)
library (XML)
fileurl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse (fileurl , useInternalNodes = TRUE)
library (hhtr)
library (httr)
use_proxy (10.3.100.207 , port = 8080)
use_proxy ("10.3.100.207" , port = 8080)
doc <- xmlTreeParse (fileurl , useInternalNodes = TRUE)
use_proxy (http://10.3.100.207 , port = 8080)
use_proxy (http:\\10.3.100.207 , port = 8080)
use_proxy (http:\10.3.100.207 , port = 8080)
use_proxy (10.3.100.207 , port = 8080)
use_proxy
args (use_proxy)
use_proxy (10.3.100.207 , port = 8080)
Sys.setenv(http_proxy="10.3.100.207:8080")
Sys.getenv
Sys.getenv()
doc <- xmlTreeParse (fileurl , useInternalNodes = TRUE)
fileurl <- "http://www.w3schools.com/xml/simple.xml"
library (XML)
doc<- xmlTreeParse (fileurl)
setInternet2
setInternet2(use = TRUE)
doc<- xmlTreeParse (fileurl)
doc<- xmlTreeParse (fileurl ,mode = "wb")
doc<- xmlTreeParse (fileurl)
setInternet2(use = TRUE)
fileurl <- "https://www.w3schools.com/xml/simple.xml"
doc<- xmlTreeParse (fileurl)
fileurl <- "http://www.w3schools.com/xml/simple.xml"
doc<- xmlTreeParse (fileurl)
fileurl2 = "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file (fileurl2 , destfile = "./R Programming/amanf.xlsx")
library(xlsx)
xmlTreeParse(file = fileurl , useInternal = TRUE)
fileurl3 = "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xml?accessType=DOWNLOAD"
xmlTreeParse(file = fileurl3 , useInternal = TRUE)
fileurl3 = http://www.w3schools.com/xml/note.xml
fileurl3 = "http://www.w3schools.com/xml/note.xml"
xmlTreeParse(file = fileurl3 , useInternal = TRUE)
download.file (fileurl , destfile = "./Getting and Cleaning Data/data/w3school.xml")
xmlTreeParse(file = "./" , useInternal = TRUE)
xmlTreeParse(file = "./Getting and Cleaning Data/data/w3school.xml" , useInternal = TRUE)
doc <- xmlTreeParse(file = "./Getting and Cleaning Data/data/w3school.xml" , useInternal = TRUE)
doc
doc <- xmlTreeParse(file = "./Getting and Cleaning Data/data/w3school.xml" , useInternal = TRUE)
submit()
getwd()
setwd ("./R Programming/")
source("rprog-scripts-submitscript1.R")
submit()
submit(manual = TRUE)
getwd()
swirl()
library (swirl)
xmlTreeParse (fileurl )
doc
library (XML)
fileurl = "http://www.w3schools.com/xml/simple.xml"
download.file (fileurl , destfile = "E:/Documents/Getting and Cleaning Data/data//SampleXML.xml")
setwd ("E:/Documents/Getting and Cleaning Data/")
doc <- xmlTreeParse ("./data//SampleXML.xml" , useInternalNodes = TRUE)
xmlRoot (doc )
doc
rootNode <- xmlRoot (doc)
xmlName(rootNode)
names (rootNode)
rootNode
class (rootNode)
rootNode[1]
rootNode[[1]
]
class(rootNode[[1]])
class(rootNode[1])
rootnode[[1]]
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
rootNode[[1]][[2]][[1]]
rootNode[[1]][[2]][[2]]
rootNode[[1]][[3]][[1]]
rootNode[[1]][[3]]
rootNode[[1]][[1]]
xmlSApply (rootNode , xmlValue)
xmlValue (rootNode)
xmlValue (rootNode[[1]])
xmlValue (rootNode[[1]][[1]])
xmlValue (rootNode[[1]][[2]])
xmlValue (rootNode[[1]][[2]][[1]])
names (rootNode[[1]])
xpathSApply (rootNode , //name , xmlValue)
xpathSApply (rootNode , "//name" , xmlValue)
xpathSApply (rootNode , "//price" , xmlValue)
xpathSApply (rootNode , "//price" , xmlAttrs)
xpathSApply (rootNode , "//description" , xmlAttrs)
xpathSApply (rootNode , "//description" , xmlValue)
xpathSApply (rootNode , "//Csfdgsg" , xmlValue)
xpathSApply (rootNode , "//calories" , xmlValue)
class (xpathSApply (rootNode , "//calories" , xmlValue) )
fileurl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse (fileurl , useInternalNodes = TRUE)
download.file (fielurl , destfile = "./data/sampleHTML.html")
download.file (fielurl , destfile = ".\data\\camera.csv\SampleHTML.html")
download.file (fielurl , destfile = "./data/sampleHTML.html")
download.file (fileurl , destfile = "./data/sampleHTML.html")
htmlTreeParse ("./data//sampleHTML.html" , useInternalNodes = TRUE)
doc = htmlTreeParse ("./data//sampleHTML.html" , useInternalNodes = TRUE)
rootNode = xmlRoot (doc)
names (rootNode)
rootnode = rootnode [["body"]]
rootNode = rootNode [["body"]]
names (rootNode)
rootNode = rootNode [["div"]]
names (rootNode)
rootNode = rootNode [["script"]]
names (rootNode)
rootNode = xmlRoot (doc)
rootNode = rootNode [["body"]]
names (rootNode)
x = rootNode[["dov"]]
x = rootNode[["div"]]
x
names (x)
x = rootNode[["script"]]
names (x)
x = rootNode[["text"]]
x
x = rootNode[["commeny"]]
x = rootNode[["commenyt"]]
x = rootNode[["comment"]]
rootNode
xpathSApply (doc , "//li[@class= 'score']")
xpathSApply (doc , "//li[@class= 'score']" , xmlValue)
doc
xpathSApply (doc , "//li[@class= 'score']" , xmlValue)
xpathSApply (doc , "//li[@class='score']" , xmlValue)
doc <- htmlTreeParse ("./data//sampleHTML.html" , useInternalNodes = TRUE)
xpathSApply (doc , "//li[@class='score']" , xmlValue)
xpathSApply (doc , "//li[@class='team-name']" , xmlValue)
library (jsonlite)
install.packages ("jsonlite")
install.packages("jsonlite")
library (jsonlite)
jsonData <- fromJSON ("https://api.github.com/users/jtleek/repos")
install.packages ("curl")
jsonData <- fromJSON ("https://api.github.com/users/jtleek/repos" , method = "wb")
jsonData <- fromJSON ("https://api.github.com/users/jtleek/repos")
library (httr)
library (RCurl)
jsonData <- fromJSON ("https://api.github.com/users/jtleek/repos")
install.packages ("curl")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
fromJSON ("https://api.github.com/users/jtleek/repos")
install.packages ("curl")
available.packages()
a = \available.packages()
a = available.packages()
class (a)
head (a)
rownamws(a)
rownames(a)
head (rownames(a) ,3)
search()
library (xlsx)
search()
